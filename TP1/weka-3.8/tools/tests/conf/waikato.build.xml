<project name="weka" default="compile_inline" basedir=".">
<!-- 
  ===========================================================================
   Ant build file for weka. Tested with ant 1.6.5 and Junit 3.8.2. Requires
   JavaMail and the java activation framework for mailing unit test results.

   Type ant -projecthelp for targets and descriptions.
   Assumes weka and tests (if unit testing) are in the same directory.
   Build file can reside and be executed from either inside weka or the
   directory containing weka.

   $Revision$
  ===========================================================================
-->

  <!-- set global properties for this build -->
  <property name="build" value="build"/>
  <property name="dist"  value="dist"/>
  <property name="doc"  value="doc"/>
  <property name="reports"  value="reports"/>
  <property name="path_modifier" value=""/>
  <property name="cvsroot_anon" value=":pserver:cvs_anon@cvs.scms.waikato.ac.nz:/usr/local/global-cvs/ml_cvs"/>
  <property name="javac_max_memory" value="256m"/>
  <property name="run_tests_fail" value="true"/>
  <property name="headless" value="false"/>

  <target name="init_all">
     <available file="weka" type="dir" 
     property="path_modifier" value=""/>
     <available file="../weka" type ="dir"
     property="path_modifier" value="../"/>
    <!-- Create the time stamp -->
    <tstamp/>
  </target>

<!-- 
 ============================================================================
 Compilation and documentation making stuff
 ============================================================================
-->

  <target name="init_compile" depends="init_all">
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${path_modifier}${build}/classes"/>
  </target>

  <!-- Compile and leave class files in source tree -->
  <target name="compile_inline" depends="init_all"
   description="Compile weka and leave class files in the source tree">
     <javac srcdir="${path_modifier}weka"
       fork="yes" memoryMaximumSize="${javac_max_memory}"
       destdir="${path_modifier}"
       source="1.5" target="1.5"/>
      <rmic base="${path_modifier}" 
       classname="weka.experiment.RemoteEngine"/>
  </target>

  <!--
        Compile and leave class files in source tree using jikes in super pedantic mode.
        This takes about half the time of regular javac-based target.
    -->
  <target name="compile_inline_jikes" depends="init_all"
   description="Pedantically compile weka, leaving class files in the source tree">
     <property name="build.compiler" value="jikes"/>
     <property name="build.compiler.pedantic" value="true"/>
     <property name="build.compiler.emacs" value="true"/>
     <javac srcdir="${path_modifier}weka"
      destdir="${path_modifier}"
      deprecation="on" 
      fork="yes" memoryMaximumSize="${javac_max_memory}"
      source="1.5" target="1.5"/>
     <rmic base="${path_modifier}" 
      classname="weka.experiment.RemoteEngine"/>
  </target>

  <!-- Compile the java code from ${path_modifier}weka into ${build}/classes -->
  <target name="compile" depends="init_compile" 
   description="Compile weka and deposit class files in ${path_modifier}/build/classes">
    <javac srcdir="${path_modifier}weka" 
      fork="yes" memoryMaximumSize="${javac_max_memory}"
      destdir="${path_modifier}${build}/classes"
      source="1.5" target="1.5"/>
    <copy todir="${path_modifier}${build}/classes" >
       <fileset dir="${path_modifier}.">
         <include name="weka/**/*.excludes"/>
         <include name="weka/**/*.gif"/>
         <include name="weka/**/*.jpeg"/>
         <include name="weka/**/*.jpg"/>
         <include name="weka/**/*.props"/>
         <include name="weka/**/*.txt"/>
         <include name="weka/**/*.xml"/>
         <include name="weka/**/DatabaseUtils.props.*"/>
         <include name="weka/gui/beans/README*"/>
       </fileset>
    </copy>
    <rmic base="${path_modifier}${build}/classes"
       classname="weka.experiment.RemoteEngine"/>
  </target>

  <!-- Make the javadocs -->
  <target name="docs" 
          depends="init_all" 
          description="Make javadocs into ${path_modifier}/doc">
    <mkdir dir="${path_modifier}${doc}"/>
    <javadoc sourcepath="${path_modifier}." 
             destdir="${path_modifier}${doc}" 
             packagenames="weka.*"
             Author="yes" 
             Public="yes" 
             maxmemory="128m"/>
    
    <!-- insert the links to our homepage and documentation.html -->
    <replace dir="${path_modifier}${doc}" 
             token="&#34;help-doc.html&#34;" 
             value="&#34;../documentation.html&#34; target=&#34;_blank&#34;">
      <include name="**/*.html"/>
    </replace>
      
    <replace dir="${path_modifier}${doc}" 
             token="Help&lt;/B&gt;&lt;/FONT&gt;&lt;/A&gt;&#38;nbsp;&lt;/TD&gt;" 
             value="Help&lt;/B&gt;&lt;/FONT&gt;&lt;/A&gt;&#38;nbsp;&lt;/TD&gt; &lt;TD BGCOLOR=&#34;&#35;EEEEFF&#34; CLASS=&#34;NavBarCell1&#34;&gt; &lt;A HREF=&#34;http://www.cs.waikato.ac.nz/ml/weka/&#34; target=&#34;_blank&#34;&gt;&lt;FONT CLASS=&#34;NavBarFont1&#34;&gt;&lt;B&gt;Weka's home&lt;/B&gt;&lt;/FONT&gt;&lt;/A&gt;&#38;nbsp;&lt;/TD&gt;">
      <include name="**/*.html"/>
    </replace>
  </target> 


<!--
  ===========================================================================
  Unit testing stuff
  ===========================================================================
-->
<!-- Junit testing initialization -->
  <target name="init_tests" depends="init_all">
    <available property="junit.present" classname="junit.framework.TestCase"/>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${path_modifier}${build}/testcases"/>
    <mkdir dir="${path_modifier}${reports}"/>
  </target>

  <!-- compile the testcases -->
  <target name="compile_tests" depends="init_tests, compile" 
   description="Compile unit tests into ${path_modifier}/build/testcases">
     <javac srcdir="${path_modifier}tests" 
       fork="yes" memoryMaximumSize="${javac_max_memory}"
       destdir="${path_modifier}${build}/testcases"
       source="1.5" target="1.5">
        <classpath>
	   <pathelement location="${path_modifier}${build}/classes"/>
	   <pathelement path="${path_modifier}${java.class.path}"/>
	</classpath>
     </javac>
     <copy todir="${path_modifier}${build}/testcases" >
       <fileset dir="${path_modifier}tests">
          <include name="**/*.arff"/>
          <include name="**/*.cost"/>
          <include name="**/*.xml"/>
       </fileset>
     </copy>
  </target>

  <!-- Run the test cases via junit's testrunner class.
   This is a faster, simpler option than running the junit task -->
  <target name="run_tests" depends="compile_tests" 
   description="Execute unit tests (fast)" if="junit.present">
     <java fork="yes" dir="${path_modifier}."
      classname="junit.textui.TestRunner"
      taskname="junit" failonerror="${run_tests_fail}">
	 <arg value="weka.AllTests"/>
	 <classpath>
	    <pathelement location="${path_modifier}${build}/classes"/>
	    <pathelement location="${path_modifier}${build}/testcases"/>
	    <pathelement path="${java.class.path}"/>
	 </classpath>
         <jvmarg value="-Djava.awt.headless=${headless}"/>
     </java>
  </target>

<!-- Run the test cases and produce an html summary (in ${path_modifier}${reports}-->
  <target name="junit" depends="compile_tests" 
   description="Execute unit tests and produce html summary (in ${path_modifier}/reports)" 
   if="junit.present">
     <junit fork="yes" dir="${path_modifier}.">
        <formatter type="xml"/>
        <classpath>
	    <pathelement location="${path_modifier}${build}/classes"/>
	    <pathelement location="${path_modifier}${build}/testcases"/>
	    <pathelement path="${java.class.path}"/>
	 </classpath>
         <batchtest todir="${path_modifier}${reports}">
	    <fileset dir="${path_modifier}${build}/testcases">
	       <include name="**/*Test.class"/>
	       <exclude name="**/AllTests.class"/>
	    </fileset>
	 </batchtest>
     </junit>

     <junitreport todir="${path_modifier}${reports}">
        <fileset dir="${path_modifier}${reports}">
	   <include name="TEST-*.xml"/>
	</fileset>
	<report format="noframes" todir="${path_modifier}${reports}"/>
     </junitreport>
  </target>


<!--
  ===========================================================================
  Release making stuff (needs a bit more work)
  ===========================================================================
-->

  <target name = "init_dist" depends="init_all">
    <!-- Create the distribution directory -->
    <mkdir dir="${path_modifier}${dist}"/>
  </target>

  <!-- Put everything in ${path_modifier}${build}/classes into the weka.jar file -->
  <target name="exejar" depends="compile, init_dist"
   description="Create an executable jar file in ${path_modifier}/dist">
    <jar jarfile="${path_modifier}${dist}/weka.jar" 
      basedir="${path_modifier}${build}/classes">
     <manifest>
       <attribute name="Main-Class" value="weka.gui.Main"/>
     </manifest>
    </jar>
  </target>

  <!-- Put all .java, and .props files into ${path_modifier}${dist}/weka-src.jar-->
  <target name="srcjar" depends="init_dist, init_all"
   description="Create a jar file containing weka source in ${path_modifier}/dist">  
    <!-- jar up the source -->
    <jar jarfile="${path_modifier}${dist}/weka-src.jar" 
      basedir="${path_modifier}.">
      <include name="weka/**/*.excludes"/>
      <include name="weka/**/*.gif"/>
      <include name="weka/**/*.java"/>
      <include name="weka/**/*.jpeg"/>
      <include name="weka/**/*.jpg"/>
      <include name="weka/**/*.props"/>
      <include name="weka/**/*.txt"/>
      <include name="weka/**/*.xml"/>
      <include name="weka/**/DatabaseUtils.props.*"/>
      <include name="weka/gui/beans/README*"/>
    </jar>
  </target>

  <!-- make a jar file containing just the stuff needed for running a remote experiment server -->
  <target name="remotejar" depends="compile, init_dist"
   description="Create a jar file containing classes for remote experiments in ${path_modifier}/dist">
     <jar jarfile="${path_modifier}${dist}/remoteEngine.jar"
      basedir="${path_modifier}${build}/classes"
      includes="weka/experiment/*_*.class,weka/experiment/RemoteEngine*.class,weka/experiment/Compute.class,weka/experiment/Task.class,weka/experiment/TaskStatusInfo.class,weka/core/Queue*.class"/>
     <copy todir="${path_modifier}${dist}" >
       <fileset dir="${path_modifier}weka/experiment">
          <include name="remote.policy"/>
          <include name="remote.policy.example"/>
       </fileset>
    </copy>
    <jar jarfile="${path_modifier}${dist}/remoteExperimentServer.jar"
     basedir="${path_modifier}${dist}"
     includes="remoteEngine.jar,remote.policy,remote.policy.example"/>
     <delete file="${path_modifier}${dist}/remoteEngine.jar"/>
     <delete file="${path_modifier}${dist}/remote.policy"/>
     <delete file="${path_modifier}${dist}/remote.policy.example"/>
   </target>


  <!-- Writes $release version number to weka/core/version.txt -->    
  <target name="set_version">
    <echo message="${release}" file="${path_modifier}weka/core/version.txt"/>
    <echo message="${release}" file="${path_modifier}${build}/classes/weka/core/version.txt"/>
  </target>

  <!-- Make a release -->
  <target name="release" depends="run_tests, set_version, exejar, remotejar, srcjar, docs, changelog"
   description="Make a release in ${release}. Run with -Drelease=&lt;number of release (eg. 3-4-1)&gt;.">
    <!-- copy the docs to dist/docs -->

    <copy todir="${path_modifier}weka-${release}/weka-${release}/doc" >
       <fileset dir="${path_modifier}${doc}"/>
    </copy>
    <copy todir="${path_modifier}weka-${release}/weka-${release}">
       <fileset dir="${path_modifier}${dist}"/>
    </copy>
    <copy todir="${path_modifier}weka-${release}/weka-${release}/changelogs">
       <fileset dir="${path_modifier}wekadocs/changelogs"/>
    </copy>
    <copy todir="${path_modifier}weka-${release}/weka-${release}/data">
       <fileset dir="${path_modifier}wekadocs/data"/>
    </copy>
    <copy todir="${path_modifier}weka-${release}/weka-${release}">
       <fileset dir="${path_modifier}wekadocs">
         <include name="README*"/>
	 <include name="*.pdf"/>
	 <include name="COPYING"/>
         <include name="documentation.*"/>
         <include name="weka.gif"/>
         <include name="weka.ico"/>
       </fileset>
    </copy>
    <zip destfile="${path_modifier}weka-${release}.zip" 
     basedir="${path_modifier}weka-${release}"/>
  </target>



<!-- New subversion stuff -->
 <target name="svnCheckout" description="Checkout from subversion. Run with -Dsvn_username=username -Dsvn_password=password -Dweka_branch=&lt;branch name (e.g. trunk, branches/book2ndEd-branch)&gt;.">
    <property name="source-root" value="."/>
    <property name="repository.URL" value="https://svn.scms.waikato.ac.nz/svn/weka"/>
    <java classname="org.tmatesoft.svn.cli.SVN"
       dir="${source-root}/" fork="true">
      <arg value="co"/>
      <arg value="--username"/>
      <arg value="${svn_username}"/>
      <arg value="--password"/>
      <arg value="${svn_password}"/>
      <arg value="${repository.URL}/${weka_branch}/weka"/>
      <classpath>
        <pathelement location="${ant.home}/lib/svnkit.jar" />
        <pathelement location="${ant.home}/lib/svnkit-cli.jar" />
      </classpath>
    </java>
    <java classname="org.tmatesoft.svn.cli.SVN"
       dir="${source-root}/" fork="true">
      <arg value="co"/>
      <arg value="--username"/>
      <arg value="${svn_username}"/>
      <arg value="--password"/>
      <arg value="${svn_password}"/>
      <arg value="${repository.URL}/${weka_branch}/tests"/>
      <classpath>
        <pathelement location="${ant.home}/lib/svnkit.jar" />
        <pathelement location="${ant.home}/lib/svnkit-cli.jar" />
      </classpath>
    </java>
    <java classname="org.tmatesoft.svn.cli.SVN"
       dir="${source-root}/" fork="true">
      <arg value="co"/>
      <arg value="--username"/>
      <arg value="${svn_username}"/>
      <arg value="--password"/>
      <arg value="${svn_password}"/>
      <arg value="${repository.URL}/${weka_branch}/wekadocs"/>
      <classpath>
        <pathelement location="${ant.home}/lib/svnkit.jar" />
        <pathelement location="${ant.home}/lib/svnkit-cli.jar" />
      </classpath>
    </java>
    <java classname="org.tmatesoft.svn.cli.SVN"
       dir="${source-root}/" fork="true">
      <arg value="co"/>
      <arg value="--username"/>
      <arg value="${svn_username}"/>
      <arg value="--password"/>
      <arg value="${svn_password}"/>
      <arg value="${repository.URL}/${weka_branch}/installer"/>
      <classpath>
        <pathelement location="${ant.home}/lib/svnkit.jar" />
        <pathelement location="${ant.home}/lib/svnkit-cli.jar" />
      </classpath>
    </java>
  </target>

   <target name="changelog"
    description="Create a changelog file for a release of Weka. Run with -Dsvn_username=username -Dsvn_password=password -Drelease=&lt;number of release (eg. 3-4-1)&gt;, -Ddate_range=&lt;date range for changes (eg. {2008-07-16}:{2008-09-29})&gt;, -Dweka_branch=&lt;branch name (e.g. trunk, branches/book2ndEd-branch)&gt;.">
    <property name="repository.URL" value="https://svn.scms.waikato.ac.nz/svn/weka"/>
    <java classname="org.tmatesoft.svn.cli.SVN" fork="true"
          output="${path_modifier}wekadocs/changelogs/CHANGELOG-${release}">
      <arg value="log"/>
      <arg value="--username"/>
      <arg value="${svn_username}"/>
      <arg value="--password"/>
      <arg value="${svn_password}"/>
      <arg value="-r"/>
      <arg value="${date_range}"/>
      <arg value="-v"/>
      <arg value="${repository.URL}/${weka_branch}/weka"/>
      <classpath>
        <pathelement location="${ant.home}/lib/svnkit.jar" />
        <pathelement location="${ant.home}/lib/svnkit-cli.jar" />
      </classpath>
    </java>
  </target>

  <!-- This target is used for an automated nightly/weekly build job -->
  <target name="nightly_build"
          depends="init_tests"
          description="Does a svn checkout, builds, runs unit tests, and mails the output to mail recipients (run ant with -Dsvn_username=username -Dsvn_password=password -Dweka_branch=branch -Dmail_recipients=&lt;email,email,...&gt; -Dmail_sender=email -Dmail_smtp_host=smtp-server)">

     <!-- run the build process -->
     <ant antfile="${ant.file}" target="svnCheckout" output="${path_modifier}${reports}/nightly_build-init.txt">
       <property name="mail_smtp_host" value="${mail_smtp_host}"/>
       <property name="mail_sender" value="${mail_sender}"/>
       <property name="mail_recipients" value="${mail_recipients}"/>
       <property name="svn_username" value="${svn_username}"/>
       <property name="svn_password" value="${svn_password}"/>
       <property name="weka_branch" value="${weka_branch}"/>
     </ant>

     <ant antfile="${ant.file}" target="run_tests" output="${path_modifier}${reports}/nightly_build-results.txt">
       <property name="mail_smtp_host" value="${mail_smtp_host}"/>
       <property name="mail_sender" value="${mail_sender}"/>
       <property name="mail_recipients" value="${mail_recipients}"/>
       <property name="run_tests_fail" value="false"/>
       <property name="headless" value="${headless}"/>
     </ant>

     <!-- mail the results -->
     <mail messageMimeType="text/html"
	       tolist="${mail_recipients}"
	       mailhost="${mail_smtp_host}"
	       subject="nightly build results (${weka_branch}): ${TODAY}"
	       from="${mail_sender}">
       <fileset dir="${path_modifier}${reports}">
         <include name="nightly_build*.*"/>
       </fileset>
     </mail>
  </target>


<!-- Clean -->
  <target name="clean" depends="init_all"
   description="Removes the build, dist and reports directories; also any class files in the source tree">
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${path_modifier}${build}"/>
    <delete dir="${path_modifier}${dist}"/>
    <delete dir="${path_modifier}${reports}"/>
    <delete>
       <fileset dir="${path_modifier}." includes="weka/**/*.class"/>
    </delete>
  </target>

  <target name="superclean" depends="clean"
   description="Clean plus removes source trees! and doc directories">
  <!-- WARNING, this deletes the source and doc directories -->
    <delete dir="${path_modifier}weka"/>
    <delete dir="${path_modifier}tests"/>
    <delete dir="${path_modifier}${doc}"/>
  </target>
</project>
