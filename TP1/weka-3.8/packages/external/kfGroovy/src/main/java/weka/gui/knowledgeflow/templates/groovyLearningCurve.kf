{
	"flow_name" : "groovyLearningCurve",
	"steps" : [
		{
			"class" : "weka.knowledgeflow.steps.GroovyStep",
			"properties" : {
				"name" : "GroovyStep",
				"script" : "import java.util.List\nimport java.util.ArrayList\nimport java.util.Map\nimport java.util.HashMap\nimport javax.swing.JButton\nimport weka.core.*\nimport weka.knowledgeflow.Data\nimport weka.knowledgeflow.StepManager\nimport weka.knowledgeflow.StepTask\nimport weka.knowledgeflow.StepTaskCallback\nimport weka.knowledgeflow.steps.BaseStep\nimport weka.knowledgeflow.steps.Step\nimport weka.knowledgeflow.steps.Classifier\nimport weka.gui.knowledgeflow.StepInteractiveViewer\nimport weka.gui.PropertySheetPanel\n\n// add further imports as necessary\n\nclass MyScript extends BaseStep {\n\n /** Small inner class to allow the user to graphically configure some learning curve options in the Knowledge Flow */\n public static class Configurer extends weka.gui.knowledgeflow.BaseInteractiveViewer {\n\n    PropertySheetPanel m_stepEditor = new PropertySheetPanel()\n\n    void init() {\n      Step scriptStep = getStep().getWrappedGroovyStep()\n      m_stepEditor.setTarget(scriptStep)\n      add(m_stepEditor, java.awt.BorderLayout.CENTER);\n    }\n\n    String getViewerName() {\n      return \"Learning curve settings\"; \n    }\n  }\n\n  private String m_holdoutSize = \"33.0\"\n  private String m_stepSize = \"100\"\n  private String m_numSteps = \"10\"\n\n  /** If there is no classifier step connected via an \"info\" connection then\n    * environment variables can be used to set the fully qualified name of \n    * a classifier to use, and its options (if any) */\n  private String m_classifierName = \"\\${CLASSIFIER_NAME}\"\n  private String m_classifierOptions = \"\\${CLASSIFIER_OPTS}\"\n  private weka.classifiers.Classifier m_classifier;\n\n  private weka.classifiers.Classifier m_classifierToUse\n\n  public String globalInfo() {\n    return \"A Groovy implementation of a knowledge flow step that calculates a learning curve for a classifier.\"  \n  }\n\n  @OptionMetadata(displayName=\"Holdout set size\", description=\"Number of instances to hold out\", displayOrder=1)\n  void setHoldoutSize(String size) {\n    m_holdoutSize = size  \n  }\n\n  String getHoldoutSize() {\n    return m_holdoutSize  \n  }\n\n  @OptionMetadata(displayName=\"Number of steps in curve\", description=\"Number of steps in the curve\", displayOrder=2)\n  void setNumSteps(String num) {\n    m_numSteps = num;  \n  }\n\n  String getNumSteps() {\n    return m_numSteps;  \n  }\n\n  @OptionMetadata(displayName=\"Step size\", description=\"Number of instances per step\", displayOrder=3)\n  void setStepSize(String size) {\n    m_stepSize = size  \n  }\n\n  String getStepSize() {\n    return m_stepSize  \n  }\n\n\t/** Implement initialization stuff here */\n\tvoid stepInit() throws WekaException { \n    List<StepManager> infos = \n      getStepManager().getIncomingConnectedStepsOfConnectionType(\n        StepManager.CON_INFO)\n    if (infos.size() > 0) {\n       Classifier classifierStep = (Classifier) infos.get(0).getInfoStep(Classifier.class)\n       m_classifier = classifierStep.getClassifier()\n    }\n\n    m_classifierToUse = m_classifier\n    if (m_classifierToUse == null) {\n      String classifName = environmentSubstitute(m_classifierName)\n      String classifOpts = environmentSubstitute(m_classifierOptions)\n      try {\n        splitOptions = weka.core.Utils.splitOptions(classifOpts)\n        m_classifierToUse = weka.classifiers.AbstractClassifier.forName(classifName, classifOpts)\n      } catch (Exception ex) {\n        throw new WekaException(ex) \n      }\n    }\n  }\n\n\t/** Main processing logic here for start points */\n\tvoid start() throws WekaException { }\n\n\t/** Main processing logic here for incoming connections */\n\tvoid processIncoming(Data data) throws WekaException {\n    getStepManager().processing();\n    try {\n      Instances trainingData = data.getPrimaryPayload()\n      trainingData.randomize(new Random(1))\n      String hSize = environmentSubstitute(m_holdoutSize)\n      String sSize = environmentSubstitute(m_stepSize)\n      String nSteps = environmentSubstitute(m_numSteps)\n      double hS = Double.parseDouble(hSize)\n      hS /= 100\n      int sS = Integer.parseInt(sSize)\n      int nS = Integer.parseInt(nSteps)\n      int numToHoldout = hS * trainingData.numInstances()\n      Instances holdoutI = new Instances(trainingData, numToHoldout)\n      for (int i = trainingData.numInstances() - numToHoldout; i < trainingData.numInstances(); i++) {\n        holdoutI.add(trainingData.instance(i))\n      }\n      String classifierSetUpString = m_classifierToUse.class.toString() + \" \"\n      if (m_classifierToUse instanceof OptionHandler) {\n        classifierSetUpString += Utils.joinOptions(((OptionHandler) m_classifierToUse).getOptions()) \n      }\n      getStepManager().logBasic(\"Using classifier: \" + classifierSetUpString)\n\n      // create the instances structure to hold the learning curve results\n      Attribute setSize = new Attribute(\"NumInstances\")\n      Attribute aucA = new Attribute(\"PercentCorrect\")\n      ArrayList<Attribute> atts = new ArrayList<Attribute>()\n      atts.add(setSize)\n      atts.add(aucA)\n\n      // The preceeding \"__\" tells the DataVisualizer to connect the points with lines\n      Instances learnCInstances = new Instances(\"__Learning curve: \" + classifierSetUpString, atts, 0)\n      getStepManager().logBasic(\"Generating curve data...\")\n      Instances training = new Instances(trainingData, 0)\n      StringBuilder buff = new StringBuilder()\n      boolean done;\n      for (int i = 0; i < nS; i++) {\n        int numInThisStep = ((i + 1) * sS)\n        if (numInThisStep >= (trainingData.numInstances() - numToHoldout)) {\n          numInThisStep = (trainingData.numInstances() - numToHoldout)\n          done = true \n        }\n        for (int k = (i * sS); k < numInThisStep; k++) {\n          training.add(trainingData.instance(k)) \n        }\n   \n        // train on this set\n        weka.classifiers.Classifier newModel = weka.classifiers.AbstractClassifier.makeCopies(m_classifierToUse, 1)[0]\n        newModel.buildClassifier(training)\n\n        weka.classifiers.evaluation.Evaluation eval = new weka.classifiers.evaluation.Evaluation(holdoutI)\n        eval.evaluateModel(newModel, holdoutI)\n        double pc = (1.0 - eval.errorRate()) * 100.0\n        buff.append(\"\"+numInThisStep+\",\"+pc+\"@@-@@n\")\n\n        Instance newInst = new DenseInstance(2)\n        newInst.setValue(0, (double)numInThisStep)\n        newInst.setValue(1, pc)\n        learnCInstances.add(newInst)\n        if (done) {\n          break \n        }\n      }\n     \n      Data output = new Data(StepManager.CON_DATASET)\n      output.setPayloadElement(StepManager.CON_DATASET, learnCInstances)\n      Data textOut = new Data(StepManager.CON_TEXT)\n      textOut.setPayloadElement(StepManager.CON_TEXT, buff.toString())\n      textOut.setPayloadElement(StepManager.CON_AUX_DATA_TEXT_TITLE, \"Learning curve\")\n      getStepManager().outputData(output, textOut)\n      getStepManager().logBasic(\"Finished generating learning curve\")\n      getStepManager().finished()\n    } catch (Exception ex) {\n      throw new WekaException(ex) \n    }\n  }\n\n\t/** Return a list of connection types that this step can\n\t *  accept. See constants defined in weka.knowledgeflow.StepManager\n\t * (or define your own connection types). */\n\tList<String> getIncomingConnectionTypes() {\n    List<String> result = new ArrayList<String>();\n\n    if (getStepManager().numIncomingConnectionsOfType(StepManager.CON_TRAININGSET) == 0) {\n      result.add(StepManager.CON_TRAININGSET); \n    }\n\n    if (getStepManager().numIncomingConnectionsOfType(StepManager.CON_INFO) == 0) {\n      result.add(StepManager.CON_INFO) \n    }\n\n    return result;  \n  }\n\n\t/** Return a list of connection types that this step can\n\t *  produce as output. See constants defined in\n \t * weka.knowledgeflow.StepManager (or define your own connection\n\t * types. */\n\tList<String> getOutgoingConnectionTypes() { \n    List<String> result = new ArrayList<String>();\n\n    if (getStepManager().numIncomingConnectionsOfType(StepManager.CON_TRAININGSET) > 0) {\n      result.add(StepManager.CON_DATASET);\n      result.add(StepManager.CON_TEXT)\n    }\n    \n    return result;\n  }\n\n  /** We're using the interactive viewer mechanism here to allow the user to\n    * graphically set some learning curve properties for our script. This is because the standard\n    * config dialog mechanism is being used by the GroovyStep wrapper to provide the\n    * script editor dialog :-) Furthermore, we're using the getInteractiveViewersImpls() method \n    * (that returns instantiated implementations of StepInteractiveViewer). Normally, a Step\n    * implementation would implement the getInteractiveViewers() method, that returns the class\n    * names of any viewers as strings - this avoids the loading of GUI classes when executing\n    * in a non-graphical environment and interactive viewers are not needed (i.e. when using the \n    * FlowRunner class). Because of the funky way Groovy compiles and loads classes, it is necessary\n    * to explicitly instantiate our interactive viewer/editor here. */\n  Map<String, StepInteractiveViewer> getInteractiveViewersImpls() {\n    Map<String, StepInteractiveViewer> result = new HashMap<String, StepInteractiveViewer>();\n    result.put(\"Set learning curve options...\", new Configurer());\n\n    return result;\n  }\n}\n"
			},
			"connections" : {
				"dataSet" : [
					"DataVisualizer"
				],
				"text" : [
					"TextViewer"
				]
			},
			"coordinates" : "440,240"
		},
		{
			"class" : "weka.knowledgeflow.steps.Loader",
			"properties" : {
				"loader" : {
					"type" : "loader",
					"class" : "weka.core.converters.ArffLoader",
					"filePath" : "weka/gui/beans/templates/credit-g.arff",
					"useRelativePath" : false
				},
				"name" : "ArffLoader"
			},
			"connections" : {
				"dataSet" : [
					"TrainingSetMaker"
				]
			},
			"coordinates" : "40,80"
		},
		{
			"class" : "weka.knowledgeflow.steps.TextViewer",
			"properties" : {
				"name" : "TextViewer"
			},
			"connections" : {
			},
			"coordinates" : "680,80"
		},
		{
			"class" : "weka.knowledgeflow.steps.TrainingSetMaker",
			"properties" : {
				"name" : "TrainingSetMaker"
			},
			"connections" : {
				"trainingSet" : [
					"ClassAssigner"
				]
			},
			"coordinates" : "200,80"
		},
		{
			"class" : "weka.knowledgeflow.steps.ClassAssigner",
			"properties" : {
				"classColumn" : "class",
				"name" : "ClassAssigner"
			},
			"connections" : {
				"trainingSet" : [
					"GroovyStep"
				]
			},
			"coordinates" : "440,80"
		},
		{
			"class" : "weka.knowledgeflow.steps.DataVisualizer",
			"properties" : {
				"name" : "DataVisualizer",
				"offscreenAdditionalOpts" : "",
				"offscreenHeight" : "400",
				"offscreenRendererName" : "Weka Chart Renderer",
				"offscreenWidth" : "500",
				"offscreenXAxis" : "",
				"offscreenYAxis" : ""
			},
			"connections" : {
			},
			"coordinates" : "680,240"
		},
		{
			"class" : "weka.knowledgeflow.steps.Note",
			"properties" : {
				"name" : "Note",
				"noteText" : "<b>NOTE: this flow is configured to run out of the box. </b> It loads an ARFF file as a resource from the classpath. If you want to\nuse your own data, edit the ArffLoader step."
			},
			"connections" : {
			},
			"coordinates" : "40,21"
		},
		{
			"class" : "weka.knowledgeflow.steps.Classifier",
			"properties" : {
				"classifier" : {
					"type" : "optionHandler",
					"class" : "weka.classifiers.functions.Logistic",
					"options" : "-R 1.0E-8 -M -1"
				},
				"loadClassifierFileName" : "",
				"name" : "Logistic",
				"resetIncrementalClassifier" : false,
				"updateIncrementalClassifier" : true
			},
			"connections" : {
				"info" : [
					"GroovyStep"
				]
			},
			"coordinates" : "200,240"
		},
		{
			"class" : "weka.knowledgeflow.steps.Note",
			"properties" : {
				"name" : "Note2",
				"noteText" : "Provides the configured\nclassifier definition to\nuse for the learning curve"
			},
			"connections" : {
			},
			"coordinates" : "163,328"
		},
		{
			"class" : "weka.knowledgeflow.steps.Note",
			"properties" : {
				"name" : "Note3",
				"noteText" : "Groovy script to generate\nthe learning curve using \nthe incoming data and\nclassifier definition"
			},
			"connections" : {
			},
			"coordinates" : "398,330"
		},
		{
			"class" : "weka.knowledgeflow.steps.Note",
			"properties" : {
				"name" : "Note4",
				"noteText" : "Visualize the curve"
			},
			"connections" : {
			},
			"coordinates" : "660,331"
		},
		{
			"class" : "weka.knowledgeflow.steps.Note",
			"properties" : {
				"name" : "Note5",
				"noteText" : "Textual learning curve\ndata"
			},
			"connections" : {
			},
			"coordinates" : "662,166"
		},
		{
			"class" : "weka.knowledgeflow.steps.Note",
			"properties" : {
				"name" : "Note6",
				"noteText" : "Load German credit\ndata"
			},
			"connections" : {
			},
			"coordinates" : "19,171"
		}
	]
}
