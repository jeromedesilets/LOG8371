From: Marco Ferrante <ferrante@disi.unige.it>
Date: 8 August 2008 5:07:39 AM
To: Mark Hall <mhall@pentaho.com>
Cc: fracpete@waikato.ac.nz
Subject: Re: Weka: some bug fixes, little enhancements and a big  
problem in RemoteEngine

Hi,
   Mark,

Mark Hall ha scritto:
> Hi Marco,
> Thanks for the bug report and the patch! I agree with all of your  
> changes and will check them in soon. As you would have noticed,  
> most of this code is quite old and predates stuff like generics etc  
> (nobody has revisited the code in quite a while :-)). If you are  
> interested in refactoring it that would be great.

For debugging purpose, I have already an "up-to-date" version of  
RemoteEngine that uses java.logging instead of println, custom  
containers replaced with java.util ones, etc....

I've not resources for a complete Weka refactoring. Nevertheless, I am
interested in distribuited architectures. So, if you don't worry to  
have different styles in different classes, I can collaborate on Weka  
part involved in remote experiments.

> Are you OK with giving copyright for your changes to the University  
> of Waikato?

Yes, I agree. But, since I am currently a PhD candidate, I will  
pleasing if you could somewhere report me as a contributor.
However, if in the future a large amount of my code will be included  
in Weka, probably we should discuss some formal agreement.

> As for problem 4 - I'm not sure that I see the problem here. The  
> task status will only get set to FAILED if an exception occurs.  
> Since [...snip...]

I must admit that my first diagnosis was approximate. Now I investigated
deeper and I suppose the problem is the one described in this article:

http://www.ibm.com/developerworks/library/j-jtp0924.html

New features in Environment class raise a AccessControlException if a
permission:

   permission java.lang.RuntimePermission "getenv.*", "read";

is omiting in the policy file (I reported this on DocWiki).
Since AccessControlException is a subclass of RuntimeException, it is
uncaught by current Weka code and it kills the thread without any  
notice.

I'm trying some alternative solutions to this problem. Although a
correct policy fix my case, the problem can return in some other  
situations.

Cheers,
   Marco.

> Cheers,
> Mark.
> On 5/08/2008, at 10:46 PM, Marco Ferrante wrote:
>> Hi,
>>   I'm playing around with Weka remote experiments and I found some  
>> troubles in weka.experiment.RemoteEngine class.
>>
>> Line numbers refer to 3.5.8 java source. A patch is attached  
>> herewith.
>>
>> 1) Bug, lines 258-259:  
>> -------------------------------------------------
>>
>> Operation
>>      (TaskStatusInfo)m_TaskStatus.get(tsi)
>> raise a NullPointerException because tsi is set to null; I presume  
>> correct line should be
>>      (TaskStatusInfo)m_TaskStatus.get(tk)
>> In my patch, I changed "tk" to "taskId" in order to match naming  
>> convention in other methods.
>>
>> 2) Bug, between lines 312 and 330:  
>> -------------------------------------
>>
>> If a RMI registry cannot be found, RemoteEngine will be  
>> instantiate twice. As result, two cleanUp threads will run.
>> I changed the execution flow a little to avoid this problem.
>>
>> 3) Enhancement, in main() method.  
>> --------------------------------------
>>
>> I added the opportunity to change RMI registry port; it can be  
>> useful on busy servers or to run more than one RemoteEngine on the  
>> same host.
>>
>> To use a non standard port, RemoteEngine must be launched with -p  
>> [port] option. This options requires weka.core.Utils class must be  
>> included in the jar file.
>>
>> From Experimenter, remote host running on non standard port must  
>> be specified as hostname:port. No change in the code seems required.
>>
>> 4) Problem, around line 194  
>> --------------------------------------------
>>
>> RemoteEngine invoke execute() on the Task. The task is supposed to  
>> be an instance of RemoteExperimentSubTask.
>>
>> In execute() method of RemoteExperimentSubTask, if the experiment  
>> fails raising an error (around lines 84-89), the Task status will  
>> be switched to FAILED, so RemoteEngine will both send a warning to  
>> the Experimenter and clean up the task.
>>
>> Unfortunately, the wrapped method runExperiment() in Experiment  
>> class never throws exceptions because silently discharge them. As  
>> result, failed experiment will live forever inside the RemoteEngine.
>>
>> This is a design problem and I cannot solve it without a  
>> discussion with the Weka developer team.
>>
>> 5) Enhancement proposal  
>> ------------------------------------------------
>>
>> Why Weka 3.5 doesn't use Java 5 enhancement (generics, logging  
>> package, etc...)?
>> Are you interested in a refactoring of RemoteEngine to support  
>> multiple thread?
>>
>> Cheers,
>>   Marco
>>
>> --------------------------------------------------------
>> Marco Ferrante (ferrante@disi.unige.it)
>> Dottorando in Informatica
>> DISI Universita' degli Studi di Genova - Italy
>> http://www.disi.unige.it/person/FerranteM/
>> --------------------------------------------------------
>> 29d28
>> < import weka.core.Utils;
>> 68,70d66
>> <
>> <   /** Clean up interval (in ms) */
>> <   protected static long CLEANUPTIMEOUT = 3600000;
>> 89,90c85,86
>> <           // sleep for a while
>> <           Thread.sleep(CLEANUPTIMEOUT);
>> ---
>>>           // sleep for an hour
>>>           Thread.sleep(3600000);
>> 102d97
>> <     cleanUpThread.setDaemon(true);
>> 168c163
>> <                  +") : task " + taskId + " queued at postion: "
>> ---
>>>                  +") : task queued at postion: "
>> 172c167
>> <     System.err.println("Task id : " + taskId + " Queued.");
>> ---
>>>     System.err.println("Task id : " + taskId + "Queued.");
>> 195c190
>> <                  +") : task " + taskId + " running...");
>> ---
>>>                  +") : task running...");
>> 210,211c205,206
>> <                    +") : task " + taskId + " failed.");
>> <           System.err.println("Task id " + taskId + " Failed!");
>> ---
>>>                    +") : task failed.");
>>>           System.err.println("Task id " + taskId + "Failed!");
>> 246c241
>> <    * around for an @seeCLEANUPTIMEOUT or more are removed.  
>> Clients are expected to check
>> ---
>>>    * around for an hour or more are removed. Clients are expected  
>>> to check
>> 258,260c253,255
>> <       String taskId = (String)keys.nextElement();
>> <       System.err.print("Examining task id : " + taskId + "... ");
>> <       String timeString = taskId.substring(0, taskId.indexOf(':'));
>> ---
>>>       String tk = (String)keys.nextElement();
>>>       System.err.print("Examining task id : " + tk + "...");
>>>       String timeString = tk.substring(0, tk.indexOf(':'));
>> 262,263c257,259
>> <       if (currentTime - ts > CLEANUPTIMEOUT) {
>> <     TaskStatusInfo tsi = (TaskStatusInfo)m_TaskStatus.get(taskId);
>> ---
>>>       if (currentTime - ts > 3600000) {
>>>     TaskStatusInfo tsi = null;
>>>     tsi = (TaskStatusInfo)m_TaskStatus.get(tsi);
>> 268,269c264,265
>> <                  + taskId + " has gone stale. Removing.");
>> <       m_TaskStatus.remove(taskId);
>> ---
>>>                  + tk + " has gone stale. Removing.");
>>>       m_TaskStatus.remove(tk);
>> 302,303d297
>> <
>> <     int port = 1099;
>> 313c307
>> <       name = localhost.getHostName();
>> ---
>>>       name = "//"+localhost.getHostName()+"/RemoteEngine";
>> 315,328c309
>> <       name = "localhost";
>> <     }
>> <
>> <     // get optional port
>> <     try {
>> <       String portOption = Utils.getOption("p", args);
>> <       if (!portOption.equals(""))
>> <         port = Integer.parseInt(portOption);
>> <     } catch (Exception ex) {
>> <       System.err.println("Usage : -p <port>");
>> <     }
>> <
>> <     if (port != 1099) {
>> <       name = name + ":" + port;
>> ---
>>>       name = "//localhost/RemoteEngine";
>> 330d310
>> <     name = "//"+name+"/RemoteEngine";
>> 334,345c314,315
>> <
>> <       try {
>> <         Naming.rebind(name, engine);
>> <         System.out.println("RemoteEngine bound in RMI registry");
>> <       } catch (RemoteException ex) {
>> <         // try to bootstrap a new registry
>> <         System.err.println("Attempting to start RMI registry on  
>> port " + port + "...");
>> <         java.rmi.registry.LocateRegistry.createRegistry(port);
>> <         Naming.bind(name, engine);
>> <         System.out.println("RemoteEngine bound in RMI registry");
>> <       }
>> <
>> ---
>>>       Naming.rebind(name, engine);
>>>       System.out.println("RemoteEngine bound in RMI registry");
>> 349c319,328
>> <       e.printStackTrace();
>> ---
>>>       // try to bootstrap a new registry
>>>       try {
>>>     System.err.println("Attempting to start rmi registry...");
>>>     java.rmi.registry.LocateRegistry.createRegistry(1099);
>>>     Compute engine = new RemoteEngine(name);
>>>     Naming.rebind(name, engine);
>>>     System.out.println("RemoteEngine bound in RMI registry");
>>>       } catch (Exception ex) {
>>>     ex.printStackTrace();
>>>       }
> -- 
> Mark Hall
> Senior Developer/Consultant, Pentaho Open Source Business Intelligence
> Citadel International, Suite 340, 5950 Hazeltine National Dr.,
> Orlando, FL 32822, USA
> +64 7 847-3537 office, +64 21 399-132 mobile, +1 815 550-8637 fax,
> Skype: mark.andrew.hall, Yahoo: mark_andrew_hall
> Download the latest release today <http://www.sourceforge.net/ 
> projects/pentaho>

-- 
--------------------------------------------------------
Marco Ferrante (ferrante@disi.unige.it)
Dottorando in Informatica
DISI Universita' degli Studi di Genova - Italy
http://www.disi.unige.it/person/FerranteM/
--------------------------------------------------------


